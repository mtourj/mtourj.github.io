{"version":3,"sources":["img/devmapLogoLarge.png","Landing/Landing.js","DevmapProperty/DevmapProperty.js","DevmapMethod/DevmapMethod.js","DevmapComponent/DevmapComponent.js","DevmapModule/DevmapModule.js","Devmap/Devmap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Landing","react_default","a","createElement","DevmapProperty","props","className","name","type","onClick","deleteProperty","DevmapMethod","returns","DevmapComponent","state","isEditing","title","_this","tempTitle","properties","toggleEditTitle","_callee","toggle","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","setState","titleInput","focus","stop","updateTitle","event","preventDefault","updateTempTitle","target","value","deleteComponent","stopPropagation","delete","addItem","index","Object","toConsumableArray","splice","_this2","this","titleSection","onSubmit","ref","input","placeholder","onChange","onBlur","bind","map","prop","src_DevmapProperty_DevmapProperty","key","src_DevmapMethod_DevmapMethod","Component","DevmapModule","components","component","DevmapComponent_DevmapComponent_DevmapComponent","Devmap","modules","deleteModule","DevmapModule_DevmapModule_DevmapModule","src","bgImage","alt","App","username","maps","author","Devmap_Devmap_Devmap","src_Landing_Landing","rel","href","integrity","crossOrigin","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74c5811c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/devmapLogoLarge.13121dac.png\";","import React from 'react';\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Devmap!</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;","import React from 'react';\r\nimport './DevmapProperty.css';\r\n\r\nconst DevmapProperty = props => {\r\n  return (\r\n    <div className=\"property\">\r\n      <p>{props.name}</p>\r\n      <p className=\"type\">{props.type}</p>\r\n      <button onClick={props.deleteProperty} className='delete'>X</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DevmapProperty;\r\n\r\n","import React from \"react\";\r\nimport \"./DevmapMethod.css\";\r\n\r\nconst DevmapMethod = props => {\r\n  return (\r\n    <div className=\"method\">\r\n      <p>{props.name}</p>\r\n      <p className=\"returns\">&rarr; {props.returns}</p>\r\n      <button className='delete'>X</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DevmapMethod;\r\n","import React, { Component } from \"react\";\r\nimport DevmapProperty from \"../DevmapProperty/DevmapProperty\";\r\nimport DevmapMethod from \"../DevmapMethod/DevmapMethod\";\r\nimport \"./DevmapComponent.css\";\r\n\r\nexport default class DevmapComponent extends Component {\r\n  state = {\r\n    isEditing: false,\r\n    title: this.props.title,\r\n    tempTitle: this.props.title,\r\n    properties: [\r\n      { name: \"property1\", type: \"string\" },\r\n      { name: \"property2\", type: \"int\" },\r\n      { name: \"property3\", type: \"{}\" }\r\n    ]\r\n  };\r\n\r\n  toggleEditTitle = async (toggle = true) => {\r\n    // Only do this if we are about to switch to !isEditing to isEditing\r\n    if (!this.state.isEditing && toggle) {\r\n      await this.setState({ tempTitle: this.state.title });\r\n    }\r\n\r\n    await this.setState({ isEditing: toggle });\r\n\r\n    // Only focus on the input if the input exists\r\n    if (this.state.isEditing) {\r\n      this.titleInput.focus();\r\n    }\r\n  };\r\n\r\n  updateTitle = event => {\r\n    event.preventDefault();\r\n    // Validate title input. If empty, just skip\r\n    if (this.state.tempTitle !== \"\")\r\n      this.setState({ title: this.state.tempTitle });\r\n    this.toggleEditTitle(false);\r\n  };\r\n\r\n  updateTempTitle = event => {\r\n    this.setState({ tempTitle: event.target.value });\r\n  };\r\n\r\n  deleteComponent = event => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    \r\n    this.props.delete();\r\n  };\r\n\r\n  addItem = event => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    // TODO - This should create a small popup form allowing\r\n    // the user to add a property/method with a name/type\r\n    // type: property or method?\r\n    // title: ?\r\n    // property type/return: ?\r\n  };\r\n\r\n  deleteProperty = index => {\r\n    const properties = [...this.state.properties];\r\n    properties.splice(index, 1);\r\n    this.setState({ properties: properties });\r\n  };\r\n\r\n  render() {\r\n    let titleSection = this.state.isEditing ? (\r\n      <form\r\n        onSubmit={this.updateTitle}\r\n        onClick={this.toggleEditTitle}\r\n        className=\"title\"\r\n      >\r\n        <input\r\n          ref={input => {\r\n            this.titleInput = input;\r\n          }}\r\n          className=\"titleText\"\r\n          placeholder=\"TITLE\"\r\n          onChange={this.updateTempTitle}\r\n          value={this.state.tempTitle}\r\n          onBlur={this.toggleEditTitle.bind(this, false)}\r\n        />\r\n        <button type=\"submit\" className=\"submit\">\r\n          &#10003;\r\n        </button>\r\n      </form>\r\n    ) : (\r\n      <div onClick={this.toggleEditTitle} className=\"title notEditing\">\r\n        <h2 className=\"titleText\">{this.state.title}</h2>\r\n        <button onClick={this.addItem} className=\"far add\">\r\n          +\r\n        </button>\r\n        <button\r\n          onClick={this.deleteComponent}\r\n          className=\"far fa-trash-alt delete\"\r\n        />\r\n      </div>\r\n    );\r\n\r\n    let properties =\r\n      this.state.properties.length > 0 ? (\r\n        this.state.properties.map((prop, index) => (\r\n          <DevmapProperty\r\n            name={prop.name}\r\n            type={prop.type}\r\n            deleteProperty={() => this.deleteProperty(index)}\r\n            key={prop.name}\r\n          />\r\n        ))\r\n      ) : (\r\n        <p className=\"emptyContainerWarning\">\r\n          This component has no properties\r\n        </p>\r\n      );\r\n\r\n    return (\r\n      <div className=\"component\">\r\n        {titleSection}\r\n\r\n        <div className=\"properties\">{properties}</div>\r\n        <div className=\"methods\">\r\n          <DevmapMethod name=\"method1\" returns=\"int\" />\r\n          <DevmapMethod name=\"method2\" returns=\"string\" />\r\n          <DevmapMethod name=\"method3\" returns=\"[{}]\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport DevmapComponent from '../DevmapComponent/DevmapComponent';\r\nimport './DevmapModule.css';\r\n\r\nexport default class DevmapModule extends Component {\r\n  state = {\r\n    components: [{ title: \"Component 1\" }, { title: \"Component 2\" }]\r\n  };\r\n\r\n  deleteComponent = index => {\r\n    const components = [...this.state.components];\r\n    components.splice(index, 1);\r\n    this.setState({ components: components });\r\n  };\r\n\r\n  render() {\r\n    const components =\r\n      this.state.components.length > 0 ? (\r\n        this.state.components.map(component => (\r\n          <DevmapComponent\r\n            delete={this.deleteComponent}\r\n            title={component.title}\r\n            key={component.title}\r\n          />\r\n        ))\r\n      ) : (\r\n        <p className=\"emptyContainerWarning\">This module has no components</p>\r\n      );\r\n\r\n    return <div className=\"module\">{components}</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport DevmapModule from \"../DevmapModule/DevmapModule\";\r\nimport bgImage from '../img/devmapLogoLarge.png';\r\nimport \"./Devmap.css\";\r\n\r\nexport default class Devmap extends Component {\r\n  state = {\r\n    modules: [\r\n      { title: \"Module 1\" },\r\n      { title: \"Module 2\" },\r\n      { title: \"Module 3\" }\r\n    ]\r\n  };\r\n\r\n  deleteModule = index => {\r\n    const modules = [...this.state.modules];\r\n    modules.splice(index, 1);\r\n    this.setState({ modules: modules });\r\n  };\r\n\r\n  render() {\r\n    const modules =\r\n      this.state.modules.length > 0 ? (\r\n        this.state.modules.map(module => (\r\n          <DevmapModule\r\n            delete={this.deleteModule}\r\n            title={module.title}\r\n            key={module.title}\r\n          />\r\n        ))\r\n      ) : (\r\n        <p className=\"emptyContainerWarning\">This map has no modules</p>\r\n      );\r\n\r\n    return <div className=\"map\">\r\n      {modules}\r\n      <img src={bgImage} className='bg-img' alt='' />\r\n    </div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Landing from './Landing/Landing';\nimport Devmap from \"./Devmap/Devmap\";\n\nexport default class App extends Component {\n  state = {\n    username: 'devmaps',\n    maps: [\n      {\n        name: \"devmap1\",\n        author: \"devmaps\"\n      },\n      {\n        name: \"devmap2\",\n        author: \"mohammadtourj\"\n      }\n    ]\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* TODO: Make landing page/map conditionally appear based on sign-in status */}\n        {/* <Landing /> */}\n        { this.state.username ?\n        <Devmap /> :\n        <Landing />\n        }\n        <link\n          rel=\"stylesheet\"\n          href=\"https://use.fontawesome.com/releases/v5.6.3/css/all.css\"\n          integrity=\"sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/\"\n          crossOrigin=\"anonymous\"\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}